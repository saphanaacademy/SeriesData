-- create schema for testing series data

CREATE SCHEMA SERIES_DATA;

-- creating a temperature table and then a machine readings table

CREATE COLUMN TABLE SERIES_DATA.MACHINE_TEMPERATURE (
	SENSOR VARCHAR(15), 
	TIMER TIMESTAMP, 
	TEMPERATURE DECIMAL(10,2)
)
SERIES (
	SERIES KEY(SENSOR) 
	PERIOD FOR SERIES(TIMER)
	EQUIDISTANT INCREMENT BY INTERVAL 1 HOUR
	MINVALUE '2015-01-01 00:00:00'
	MAXVALUE '2015-12-31 23:00:00'
 );

CREATE COLUMN TABLE SERIES_DATA.MACHINE_READINGS (
	SENSOR VARCHAR(15), 
	TIMER TIMESTAMP, 
	READING DECIMAL(10,2)
)
SERIES (
	SERIES KEY(SENSOR) 
	PERIOD FOR SERIES(TIMER)
	EQUIDISTANT INCREMENT BY INTERVAL 1 MINUTE
	MINVALUE '2015-01-01 00:01:00'
	MAXVALUE '2015-12-31 23:59:00'
 );
 
-- inserting manufactured / fake data into the new series tables

DELETE FROM SERIES_DATA.MACHINE_READINGS;
INSERT INTO SERIES_DATA.MACHINE_READINGS (
	-- the following is manufactured / fake data on a minute interval
	SELECT 
		'MACHINE_1', 
		GENERATED_PERIOD_START, 
		ROUND(20+RAND()*20,1) 
	FROM 
		SERIES_GENERATE_TIMESTAMP('INTERVAL 1 MINUTE', '2015-01-01 00:01:00', '2015-01-31 23:59:00')
);

DELETE FROM SERIES_DATA.MACHINE_TEMPERATURE;
INSERT INTO SERIES_DATA.MACHINE_TEMPERATURE (
	-- the following is manufactured / fake data on an hour interval
	SELECT 
		'MACHINE_1', 
		GENERATED_PERIOD_START, 
		30 + ROUND(RAND()*6,1) 
	FROM 
		SERIES_GENERATE_TIMESTAMP('INTERVAL 1 HOUR', '2015-01-01 00:00:00', '2015-01-31 23:00:00')
);

-- selecting data from the two new series tables

SELECT * FROM SERIES_DATA.MACHINE_READINGS;
SELECT * FROM SERIES_DATA.MACHINE_TEMPERATURE;

-- horizontal aggregation, using series_round & round_down, minute to hour

SELECT 
	SENSOR, 
	SERIES_ROUND(TIMER, 'INTERVAL 1 HOUR', ROUND_DOWN) AS TIMER_HOUR, 
	AVG(READING) AS READING_AVG_HOUR
FROM SERIES_DATA.MACHINE_READINGS
GROUP BY SENSOR, SERIES_ROUND(TIMER, 'INTERVAL 1 HOUR', ROUND_DOWN);

	-- or

WITH MRH AS (
	SELECT SENSOR, 
	SERIES_ROUND(TIMER, 'INTERVAL 1 HOUR', ROUND_DOWN) AS TIMER_HOUR, 
	READING 
	FROM SERIES_DATA.MACHINE_READINGS
)
SELECT SENSOR, TIMER_HOUR, AVG(READING) AS READING_AVG_HOUR 
FROM MRH
GROUP BY SENSOR, TIMER_HOUR;

-- vertical aggregation between readings & temperature tables
-- after horizontal aggregation of machine readings

WITH MRH AS (
	SELECT SENSOR, 
	SERIES_ROUND(TIMER, 'INTERVAL 1 HOUR', ROUND_DOWN) AS TIMER_HOUR, 
	READING 
	FROM SERIES_DATA.MACHINE_READINGS
)
SELECT 
	MRH.SENSOR, 
	MRH.TIMER_HOUR, 
	AVG(MRH.READING) AS READING_AVG_HOUR,
	MAX(MT.TEMPERATURE) AS TEMPERATURE
FROM MRH, SERIES_DATA.MACHINE_TEMPERATURE MT
WHERE MRH.SENSOR = MRH.SENSOR
	AND MRH.TIMER_HOUR = MT.TIMER
GROUP BY MRH.SENSOR, MRH.TIMER_HOUR;

	-- or

SELECT 
	MT.SENSOR, 
	MT.TIMER,
	( 
		SELECT AVG(MR.READING)	
		FROM SERIES_DATA.MACHINE_READINGS MR
		WHERE MR.SENSOR = MT.SENSOR AND
			SERIES_ROUND(MR.TIMER, 'INTERVAL 1 HOUR', ROUND_DOWN) = MT.TIMER
	) AS READING_AVG_HOUR,
	MT.TEMPERATURE
FROM 
	SERIES_DATA.MACHINE_TEMPERATURE MT;
